//Dashboard and beside grid
<div className="flex">
      {/* Sidebar with Dashboard */}
      <div className="w-[242.01px]">
        <Dashboard />
      </div>

      {/* Main Content Area */}
      <div className="min-h-screen p-7 w-full bg-white rounded-2xl mt-3 ml-3 mr-3">
        <h1>class</h1>
      </div>
</div>


//progress Bar and percentage
<div className="w-[250px]">
  {/* Progress Bar */}
  <div className="relative bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mb-1">
    <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: '45%' }}></div>
  </div>

  {/* Title and Percentage Row */}
  <div className="flex justify-between items-center">
    <span className="text-gray-700 font-semibold truncate">Design architecture of website</span>
    <span className="text-gray-700 font-semibold">45%</span>
  </div>
</div>


//progress Bar and with color
const ProgressBarWithText = ({ progress }) => {
    // Determine the color based on the progress percentage
    let progressBarColor;
    if (progress < 40) {
      progressBarColor = "bg-red-600";
    } else if (progress >= 40 && progress < 70) {
      progressBarColor = "bg-orange-600";
    } else {
      progressBarColor = "bg-green-600";
    }
  
    return (
      <div className="w-[250px]">
        {/* Progress Bar */}
        <div className="relative bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mb-1">
          <div
            className={`${progressBarColor} h-2.5 rounded-full`}
            style={{ width: `${progress}%` }}
          ></div>
        </div>
  
        {/* Title and Percentage */}
        <div className="flex justify-between">
          <span className="text-gray-700 font-semibold">Design architecture</span>
          <span className="text-gray-700 font-semibold">{progress}%</span>
        </div>
      </div>
    );
  };
  
  export default ProgressBarWithText;
  
import React, { useEffect, useRef, useState } from "react";
import { useChatStore } from "../../store/useChatStore";
import { useAuthStore } from "../../store/useAuthStore.js";
import MessageSkeleton from "../skeletons/MessageSkeleton.jsx";
import ChatHeader from "./ChatHeader.jsx";
import MessageInput from "./MessageInput.jsx";
import { formatMessageTime } from "../../lib/utils.js";

function ChatContainer() {
  const {
    messages,
    searchTerm,
    getMessages,
    isMessageLoading,
    selectedUser,
    subscribeToMessages,
    unsubscribeFromMessages,
  } = useChatStore();

  const { authUser } = useAuthStore();
  const messageEndRef = useRef(null);

  //const [highlightedIndexes, setHighlightedIndexes] = useState([]); // Store the indexes of highlighted text
  //const [currentIndex, setCurrentIndex] = useState(0); // Store the current index of highlighted text

  useEffect(() => {
    getMessages(selectedUser._id);

    subscribeToMessages();

    return () => unsubscribeFromMessages();
  }, [
    selectedUser._id,
    getMessages,
    subscribeToMessages,
    unsubscribeFromMessages,
  ]);

  useEffect(() => {
    if (messageEndRef.current && messages) {
      messageEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  //////useEffect(() => {
    if (searchTerm) {
      const indexes = [];
      // Find all indexes of the search term in the messages
      messages.forEach((message, idx) => {
        if (message.text && message.text.toLowerCase().includes(searchTerm.toLowerCase())) {
          indexes.push(idx); // Add index to the list
        }
      });
      setHighlightedIndexes(indexes);
      setCurrentIndex(0); // Reset to the first highlighted message
    } else {
      setHighlightedIndexes([]); // Clear highlighted indexes when searchTerm is cleared
    }
  }, [searchTerm, messages]);/////

  ///////const navigateHighlight = (direction) => {
    if (highlightedIndexes.length === 0) return; // No highlighted messages

    let newIndex = currentIndex + direction;

    // Ensure newIndex stays within bounds
    if (newIndex < 0) newIndex = highlightedIndexes.length - 1;
    if (newIndex >= highlightedIndexes.length) newIndex = 0;

    setCurrentIndex(newIndex);
    const messageToScroll = highlightedIndexes[newIndex];
    messageEndRef.current?.scrollIntoView({ behavior: "smooth" }); // Scroll to the highlighted message
  };//////

  const highlightText = (text) => {
    if (!searchTerm) return text;

    // Create a regular expression to match the search term
    const regex = new RegExp(`(${searchTerm})`, "gi");
    return text.split(regex).map((part, index) =>
      part.toLowerCase() === searchTerm.toLowerCase() ? (
        <span key={index} className="bg-yellow-300">{part}</span>
      ) : (
        part
      )
    );
  };

  if (isMessageLoading) {
    return (
      <div className="flex-1 flex flex-col overflow-auto">
        <ChatHeader />
        <MessageSkeleton />
        <MessageInput />
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col overflow-auto">
      <ChatHeader />

      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {/* Render Up and Down buttons */}
       /// <div className="flex justify-between mb-4">
          <button
            className="p-2 border rounded-full"
            onClick={() => navigateHighlight(-1)}
            disabled={highlightedIndexes.length === 0}
          >
            Up
          </button>
          <button
            className="p-2 border rounded-full"
            onClick={() => navigateHighlight(1)}
            disabled={highlightedIndexes.length === 0}
          >
            Down
          </button>
        </div>////

        {messages.map((message, index) => (
          <div
            key={message._id}
            className={`chat ${message.senderId === authUser._id ? "chat-end" : "chat-start"}`}
            ref={index === highlightedIndexes[currentIndex] ? messageEndRef : null}
          >
            <div className="chat-image avatar">
              <div className="w-8 h-8 rounded-full border">
                <img
                  src={
                    message.senderId === authUser._id
                      ? authUser.profilePic || "/avatar.png"
                      : selectedUser.profilePic || "/avatar.png"
                  }
                  alt="profile pic"
                />
              </div>
            </div>
            <div className="chat-header mb-1">
              <time className="text-xs opacity-50 ml-1">
                {formatMessageTime(message.createdAt)}
              </time>
            </div>
            <div
              className={`chat-bubble flex flex-col ${
                message.senderId === authUser._id
                  ? "bg-blue-500 text-white"
                  : "bg-gray-200 text-black"
              }`}
            >
              {message.image && (
                <img
                  src={message.image}
                  alt="Attachment"
                  className="sm:max-w-[200px] rounded-md mb-2"
                />
              )}
              {message.text && <p>{highlightText(message.text)}</p>}
            </div>
          </div>
        ))}
      </div>

      <MessageInput />
    </div>
  );
}

export default ChatContainer;
