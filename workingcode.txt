//Dashboard and beside grid
<div className="flex">
      {/* Sidebar with Dashboard */}
      <div className="w-[242.01px]">
        <Dashboard />
      </div>

      {/* Main Content Area */}
      <div className="min-h-screen p-7 w-full bg-white rounded-2xl mt-3 ml-3 mr-3">
        <h1>class</h1>
      </div>
</div>


//progress Bar and percentage
<div className="w-[250px]">
  {/* Progress Bar */}
  <div className="relative bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mb-1">
    <div className="bg-blue-600 h-2.5 rounded-full" style={{ width: '45%' }}></div>
  </div>

  {/* Title and Percentage Row */}
  <div className="flex justify-between items-center">
    <span className="text-gray-700 font-semibold truncate">Design architecture of website</span>
    <span className="text-gray-700 font-semibold">45%</span>
  </div>
</div>


//progress Bar and with color
const ProgressBarWithText = ({ progress }) => {
    // Determine the color based on the progress percentage
    let progressBarColor;
    if (progress < 40) {
      progressBarColor = "bg-red-600";
    } else if (progress >= 40 && progress < 70) {
      progressBarColor = "bg-orange-600";
    } else {
      progressBarColor = "bg-green-600";
    }
  
    return (
      <div className="w-[250px]">
        {/* Progress Bar */}
        <div className="relative bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mb-1">
          <div
            className={`${progressBarColor} h-2.5 rounded-full`}
            style={{ width: `${progress}%` }}
          ></div>
        </div>
  
        {/* Title and Percentage */}
        <div className="flex justify-between">
          <span className="text-gray-700 font-semibold">Design architecture</span>
          <span className="text-gray-700 font-semibold">{progress}%</span>
        </div>
      </div>
    );
  };
  
  export default ProgressBarWithText;
  


//grid Row
import React from "react";
import Dashboard from "../components/dashboard";

// Reusable TaskCard Component
const TaskCard = ({ content }) => (
  <div className="bg-white text-black p-4 rounded-2xl shadow-md w-[265px] flex items-center justify-center">
    {content}
  </div>
);

const Task = () => {
  // Define task data for each category
  const tasks = {
    New: ["Task1", "Task 2", "Task 3", "Task 4"],
    InProgress: ["Task 1", "Task 2", "Task 3"],
    Overdue: ["Task 1", "Task 2"],
    Completed: ["Task 1"],
  };
  // Find the maximum number of tasks in any category to set the row count
  const maxTasks = Math.max(...Object.values(tasks).map(category => category.length));

  return (
    <div className="flex">
      {/* Sidebar with Dashboard */}
      <div className="w-[242.01px]">
        <Dashboard />
      </div>

      {/* Main Content Area */}
      <div className="min-h-screen p-7 w-full bg-gray-200 rounded-2xl mt-3 ml-3 mr-3">
        {/* Header */}
        <div className="flex items-center justify-between w-full">
          <h1 className="text-3xl font-extrabold ml-2">Tasks</h1>
          <button className="bg-green-600 hover:bg-green-700 text-white text-sm mt-1 font-medium py-2 px-4 rounded-full">
            + Add new
          </button>
        </div>

        <hr className="h-px my-3 bg-gray-200 border-0 dark:bg-gray-400" />

        {/* Categories Header */}
        <div className="grid grid-cols-4 gap-2 text-center">
          {["New Task", "In progress", "Overdue", "Completed"].map((category, index) => (
            <div key={index} className="col-span-1 font-semibold">{category}</div>
          ))}
        </div>

        <hr className="h-px my-3 bg-gray-200 border-0 dark:bg-gray-400" />

        {/* Task Grid */}
        <div className="grid grid-cols-4 gap-4">
          {Object.keys(tasks).map((category, index) => (
            <div key={index} className="grid gap-4">
              {tasks[category].map((task, i) => (
                <TaskCard content={task} key={i} />
              ))}
              {/* Only render empty placeholders if there are fewer tasks than maxTasks */}
              {tasks[category].length < maxTasks && 
                Array.from({ length: maxTasks - tasks[category].length }).map((_, i) => (
                  <div key={`empty-placeholder-${i}`} className="w-[265px] h-[100px]"></div>
                ))
              }
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Task;


///tasks
import React, { useEffect, useState } from "react";
import axios from "axios";
import Dashboard from "../components/dashboard";
const TaskCard = ({ content, category, label, dueDate }) => {
  const [isChecked, setIsChecked] = useState(false);

  const bgColor = {
    Completed: "bg-green-200 border-solid border-2 border-green-300",
    Overdue: "bg-gray-300 border-solid border-2 border-gray-300",
    InProgress: "bg-yellow-100 border-solid border-2 border-yellow-300",
    New: "bg-blue-100 border-solid border-2 border-blue-300",
  };

  const handleCheckboxChange = async() => {
    setIsChecked(!isChecked);

    if (!isChecked) {
      try {
        // Call the backend to delete the task
        await axios.delete(`http://localhost:4000/tasks/${task._id}`);
        onTaskDeleted(task._id); // Notify parent to update the task list
      } catch (error) {
        console.error("Error deleting task:", error);
      }
    }  };

  if (isChecked) {
    return null; // When checked, return null to hide the TaskCard completely
  }

  return (
    <div
      className={`text-black p-4 rounded-2xl shadow-md w-[240px] h-[140px] ${bgColor[category]} flex flex-col relative ml-6`}
    >
      {/* Title with truncation */}
      <div
        className={`font-semibold text-sm overflow-hidden text-ellipsis line-clamp-2 ${
          category === "Completed" ? "w-full" : "pr-8"
        }`}
      >
        {content}
      </div>

      {/* Conditionally render checkbox based on category */}
      {category !== "Completed" && (
        <div
          className="absolute top-2 right-2 w-6 h-6 bg-white border-2 border-gray-500 rounded-lg flex items-center justify-center"
          onClick={handleCheckboxChange}
        >
          <input
            type="checkbox"
            checked={isChecked}
            onChange={handleCheckboxChange}
            className="appearance-none w-4 h-4 rounded-sm checked:bg-green-500 checked:border-transparent"
          />
        </div>
      )}

      {/* Label and Due Date */}
      <div className="mt-4 mr-2 flex items-center justify-start">
        {label ? (
          <div
            className={`text-white text-xs px-2 py-1 rounded-lg ${
              label === "Completed"
                ? "bg-green-500"
                : label === "ASAP"
                ? "bg-red-500"
                : "bg-blue-500"
            }`}
          >
            {label}
          </div>
        ) : (
          <div className="h-6" /> // Placeholder for spacing when label is empty
        )}
      </div>
      <div className="mt-2 text-xs text-gray-500">{dueDate}</div>
    </div>
  );
};
function Taskdemo() {
  const [tasks, setTasks] = useState([]); // Initialize as an empty array

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const response = await axios.get("http://localhost:4000/tasks");
        const tasksArray = response.data;

        // Group tasks by category
        const groupedTasks = tasksArray.reduce((acc, task) => {
          if (!acc[task.category]) {
            acc[task.category] = [];
          }
          acc[task.category].push(task);
          return acc;
        }, {});

        setTasks(groupedTasks); // Set the grouped tasks
      } catch (error) {
        console.error("Error fetching tasks:", error);
      }
    };

    fetchTasks();
  }, []);

  return (
    <div className="flex bg-gray-100">
      {/* Sidebar with Dashboard */}
      <div className="w-[242.01px]">
        <Dashboard />
      </div>

      {/* Main Content Area */}
      <div className="min-h-screen p-7 w-full bg-white rounded-2xl mt-3 ml-3 mr-3">
        <div className="flex items-center justify-between w-full">
          <h1 className="text-3xl font-extrabold ml-2">Tasks</h1>
          <button className="bg-green-600 hover:bg-green-700 text-white text-sm mt-1 font-medium py-2 px-4 rounded-full">
            + Add new
          </button>
        </div>

        <hr className="h-px my-3 bg-gray-200 border-0 dark:bg-gray-400" />

        {/* Categories Header */}
        <div className="grid grid-cols-4 gap-2 text-center">
          {["New Task", "In progress", "Overdue", "Completed"].map(
            (category, index) => (
              <div key={index} className="col-span-1 font-semibold">
                {category}
              </div>
            )
          )}
        </div>
        <hr className="h-px my-3 bg-gray-200 border-0 dark:bg-gray-400" />
        <div className="grid grid-cols-4 gap-4 divide-x divide-gray-300">
          {Object.keys(tasks).map((category, index) => (
            <div key={index} className="grid gap-4">
              {/* Render each task in the category */}
              {tasks[category]?.map((task, i) => (
                <TaskCard
                  content={task.content}
                  category={category}
                  label={task.label}
                  dueDate={task.duedate} // Ensure consistent casing of keys
                  key={task._id} // Use a unique key
                />
              ))}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default Taskdemo;